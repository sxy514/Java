一、面向对象技术
  面向对象技术是一种软件开发方法，在面向对象程序设计方法出现之前，软件界广泛流行的是面向过程的设计方法，这种方法中使用的众多变量名和函数名互不约束，令程序员不堪重负。
  随着开发系统规模的不断扩大，面向过程的方法越来越不能满足开发人员的要求，面向对象技术应运而生，这种新技术使得程序结构简单，相互协作容易，更重要的是程序的重用性大大提升。
  所谓面向对象的方法学，就是使得分析、设计和实现一个系统的方法尽可能地接近人们认识一个系统的方法。
  通常分为三个方面：面向对象的分析(OOA)、面向对象的设计(OOD)、面向对象的程序设计(OOP)。面向对象技术包含的概念主要有抽象、对象、类、类型层次(子类)、封装、继承性、多态性等。
  Java语言是一种“纯”面向对象语言，它的所有数据类型，包括最基本的布尔型、数值型及字符型，都有相应的类，程序可以完全基于对象来编写。
  
二、OOP
  现实世界中存在很多同类的对象，他们来自于同一种原型，具有一样的共性。或者说它们来自与同一个模板。这就是类的概念。这其中的某个特定实体即为实例或称对象。对象是类的具相，类是对象的抽象。
  OOP技术把问题看成是相互作用的事物的集合，也就是对象的集合。对象具有两个特性，一是状态，二是行为。状态是指对象本身的信息，行为是实现对对象的操作。在OOP中，用属性来描述状态，而把对它的操作定义为方法。-->
  --> 属性也称为数据，这样的对象就是数据加方法。可以将现实生活中的对象经过抽象、映射为程序中的对象，
  OOP中采用了三大技术：封装、继承和多态。封装体现的特点是将对象的属性及实现细节隐藏起来，只给出如何使用的信息。
  1.封装：将数据及对数据的操作捆绑在一起成为类，这就是封装技术。对象是类的实例，外界使用对象中的数据收到类定义的限制
  2.继承：将一个已有类中的数据和方法保留，并加上自己特殊的数据和方法，从而构成一个新类，这是OOP中的继承。原来的类是父类，也称为基类或超类。新类是子类，子类派生与父类，或说子类继承父类。继承体现的是一种层次关系，下一层的类可以从上一层的类继承定义，同时还可以改变和扩充一些特性
  3.多态：在一个类或多个类中，可以让多个方法使用同一个名字，从而形成多态性。多态可以保证对不同类型的数据进行等同的操作，名字空间也更加宽松。多态还有一个重要的特点，即使用相同的操作名，能根据具体的对象自动选择对应的操作。
  
  
第二章第一节：
一、空白，注释及语句
  1.空白：在Java程序中，换行符和回车符都可以表示一行的结束，它们可以被看作空白。应该注意代码的格式，增加可阅读性
  2.注释：程序中适当的加入注释可以增加易读性，注释有三种形式：1.// 在一行内的注释  2./* 一行或者多行注释 */  3./** 文档注释 */ 
  3.语句、分号和块：语句是Java程序的最小执行单位，程序的各语句间以“;” 分隔。在 “{}” 内的一系列语句成为语句块。

二、关键字
  Java语言定义了许多关键字，关键字也称为保留字。它们都有各自的特殊意义和用途，不能把它们当成普通的标识符使用。
  Java关键字如下：
  abstract	 boolean    break	 byte	case 	cast	catch	char	class	const	continue	default		do 		double		else  	extends		false	 final	 finally	float	for
  future	generic		goto	 if		implements		import		innner		instanceof	  int		interface		long 	native		new		null	 operator	outer	 package	private		
  protected	 public		rest	return	short	static	strictfp	super		switch		synchronized(线程同步)	 this		throw	 throws		transient	 true	try		var		void  	volatile	while
  定义的这些关键字中，少数几个已不再使用。还有几个是预留的关键字，目前尚未使用。这些关键字是：cast, const, future, generic, goto, inner, operator, outer, rest和var等
 
三、标识符
  在Java中，标识符由字母、数字、下划线(_)或美元符号（$）组成的字符串，其中数字不能作为标识符的开头。标识符区分大小写，长度没有限制。除以上所列几项外，标识符中不能含有其他符号，当然也不许留空白，在程序中，标识符可用作变量名，方法名、接口名和类名等。
  Java源代码使用的是unicode码，而不是ASCII码

四、Java编程风格
  在编程时，应当注意自己的编程风格，增加必要的注释和空格，采用缩进格式。
  以下是常见的命名约定：
  1.类名或接口名：多为动词，含有大小写，首字母大写，其余各单词首字母大写。如HelloWorld..
  2.方法名：多是动词，含有大小写，首字母小写，其余各单词首字母大写，尽量不要在方法名中使用下划线。如getName\setAdress等
  3.常量名：简单类型常量的名字应该全部为大写字母，单词与单词之间用下划线分隔，对象常量可以使用混合大小写，如BLUE_COLOR。
  4.变量名：所有的实例变量，类变量，终极变量和静态变量等都使用混合大小写，首字符为小写，后面单词的首字母用大写。变量名中尽量不要使用下划线。如balance, orders等
  命名名称要有意义，尽量避免使用单字符名字，除非是临时使用的要“扔掉”的变量（比如在循环结构中的循环变量），总的来说就是要增加代码的可读性
 
第二节、基本数据类型
  Java的数据类型共分为两大类，一类是基本数据类型，另一类是复合数据类型。基本类型有八种，分为4小类，分别是整型，浮点型，字符型，和布尔型。整型和浮点型也合称为数值型。复合数据类型包括数组，类和接口。其中，数组也是一个很特殊的概念，它是对象，而不是一个类，一般把它归为复合数据类型。
  1.Java语言提供了4种整型量，对应的关键字分别是：byte, short, int 和 long。 它们的字节大小和可表示的范围分别是：
  byte(整数长度8位,字节数1)= -2的7次幂 ～ 2的7次幂-1 (-128~127)
  short(整数长度16位，字节数2)= -2的15次幂 ～ 2的15次幂-1（-32768～32767）
  int(整数长度32位，字节数4)= -2的31次幂 ～ 2的31次幂-1（-2,147,483,648～2,147,483,647）
  long(整数长度64位，字节数8)= -2的63次幂 ～ 2的63次幂-1（-9,223,372,036,854,775,808～9,223,372,036,854,775,807）
  整型常量是int型的。如果想表示一个长整型常量，需要在数的后面明确写出字母“L”。L表示它是一个long型量。这里，使用大写L或者小写l均有效。Java语言还提供了几个特殊的整型常量值表示最大值和最小值（比如int类型最大值为: integer.MAX_VALUE;最小是为integer.MIN_VALUE）
 
  2.Java浮点数类型遵从标准的浮点规则。浮点数类型有两种：一种是单精度浮点数，用float关键字说明;另一种是双精度浮点数，用double关键字说明，它们都是有符号数。
  float(浮点数长度32位，字节数4)= 1.4e-45f ~ 3.4028235e + 38f
  double(浮点数长度64位，字节数8)= 4.9e-324d~1.7976931348623157e + 308d
  如果数值常量中包含小数点，指数部分（字符E），或数的后面跟有字母F或字母D，则为浮点数。浮点数常量在默认情况下是double型的，除非用字母F明确说明它是float型。浮点型常量中的字母D或者F支持大小写。
  Java语言中有几个特殊的浮点数常量：float/double类型通用（最大值：Float.MAX_VALUE; 最小值：Float.MIN_VAlUE; 正无穷大：Float.POSITIVE_INFINITY; 负无穷大：Float.NEGATIVE_INFINITY; 0/0: Float.NaN;）
 
  3.字符类型char：单个字符用char类型表示。一个char表示一个Unicode字符，其值用16位无符号整数表示，范围为0～65535。char类型的常量值必须用一对单引号('')扩起来，分为普通字符常量和转义字符常量两种。
  使用单引号括住一个字符，表示一个普通的字符常量。但有些字符在Java语言中有特殊含义，常用转义符： \b表示退格键 \n表示换行符 \r表示回车符 \t表示水平制表符 \\表示一个反斜杠 \'表示一个单引号 \"表示一个双引号
  
  4.布尔类型boolean：逻辑值有两种状态，它们常被写作on和off，true和false，yes和no等。布尔类型也称为逻辑类型。bool类型有两个常量值：true和false，它们全是小写，在计算机内部用8位二进制数表示。
  Java是一种严格的类型语言，它不允许数值类型和布尔类型之间进行转换。不能向C/C++那样允许用数值表示逻辑值，如用0表示false，非0表示true。Java不允许这样做，需要使用逻辑值的地方不能以其他类型的值替代

第三节、表达式
  表达式由运算符和操作数组成，对操作数进行运算符指定的操作，并得出运算结果;
  Java运算符按功能可分为：算术运算符/ 关系运算符/ 逻辑运算符/ 位运算符/ 赋值运算符/ 条件运算符，除此之外，还有几个特殊用途的运符，如数组下标运算符等。操作数可以是变量，常量或方法调用等
  1.操作数：有常量和变量之分，只有简单数据类型和String类型才有相应的常量形式，变量是存储数据的基本单元，它可以用作表达式中的操作数，变量在使用之前要先声明。
  有时把类类型的变量称为引用。在声明变量的同时给变量赋了初值，称为对变量进行了初始化。 声明变量的地方有两处，一处是在方法内，另一处是在类定义内。方法内定义的变量称为自动变量，也称为局部变量、临时变量或栈变量。类中定义的变量是类的成员变量。
  Java程序中不允许将未经初始化的变量用作操作数。
  变量作用域：变量的作用域是值可访问该变量的代码范围。类中定义的成员变量的作用域是整个类。方法中定义的的局部变量的作用域是从该变量的声明处开始到包含该声明的语句块结束处，块外是不可用的。
  
  2.运算符
  2.1 算术运算符：算术运算符包括通常的加(+)、减(-)、乘(*)、除(/)、取模(%),完成整型和浮点型数据的运算。许多语言中的取模运算符只能用于整型数据，Java对此有所拓展，它允许对浮点数进行取模操作，例如 15.2 % 5 的结果是 0.2，取模还可以用于负数，结果的符号与地一个操作数符号相同。
  此外，算术运算符还有“++”和“--”自增和自减运算符，这两个运算符有前缀形式和后缀形式，++i和i++的执行顺序不一样，++i在i使用之前先加1,i++在i使用过后再加1,--i和i--的情况与此类似。
  
  2.2 关系运算符：关系运算符用来比较两个值，包括大于(>)、小于(<)、大于等于(>=)、小于等于(<=)、等于(==)和不等于(!=)6种。关系运算符都是二元运算符，也就是每个运算符都带有两个操作数。运算的结果是一个逻辑值。
  Java允许“==”和“！=”两种运算用于任何数据类型。例如，可以判断两个实例是否相等。
  
  2.3 逻辑运算符：逻辑运算符包括逻辑与(&&)、逻辑或(||)、逻辑非(!)。前两个是二元运算符，后一个是一元运算符。
  
  2.4 位运算符：位运算符用来对二进制位进行操作，包括按位取反(~)、按位与(&)、按位或(|)、异或(^)、右移(>>)、左移(<<)、及无符号右移(>>>)。位运算符只能对整型和字符型数据进行操作。运算在八位二进制下进行。
  Java提供两种右移运算符。运算符“>>”执行算术右移，它使用最高位填充移位后左侧的空位。右移的结果为：每移一位，第一个操作数被2整除一次，移动的次数由第二个操作数确定。
  逻辑右移运算符(也称为无符号右移运算符) >>>只对位进行操作，而没有算术含义，它用0填充左侧的空位。算术右移不改变原数的符号，而逻辑右移不能保证这一点。
  
  2.5 其他运算符：Java中的运算符还包括拓展赋值运算符(+=、-=、*=、/=、%=、&=、|=、^=、>>=、<<=和>>>=）、条件运算符(?:)、点运算符(.)、实例运算符(instan-ceof)、new运算符及数组下标运算符([])等。
  条件运算符(?：)是三元运算符，它的一般形式为：逻辑表达式 ? 语句1：语句2;  其中逻辑表达式得到一个逻辑值，根据该值的真假决定执行后续操作。逻辑值为真执行语句12,否则执行语句2。语句1和语句2需返回相同类型的值，且不能为void。
  
  2.6运算符的优先次序：在对一个表达式进行运算时，如果表达式中含有多种运算符，则要按运算符的优先次序依次从高到低进行，同级别的运算符则根据结合律自左向右或自右向左进行。括号可以改变运算次序。
  
  3.表达式的提升和转换：
  Java是一种强类型语言，不支持变量类型间的自动任意转换，有时必须显式地进行变量类型的转换。不同类型的数据先转换为同类型然后再进行运算。转换的一般原则是位数少的类型转换为位数多的类型，这称为自动类型转换。这样做的目的是保证转换时不丢失有用信息。
  能够进行自动类型转换的类型顺序为：byte、short、char、int、long、float、double。排在前面的类型可自动转换为排在后面的类型
第二章小结：本章介绍了Java程序的一些基本语法知识，包括空白、注释、关键词及标识符、数据和表达式等。着重介绍了Java语言命名标识符规则，列出了所有的关键字。介绍了8种基本数据类型，包括表示它们的关键字，各类型的表示范围，各类型常量值的含义、转义符的含义等。
本章还介绍了运算符的含义及其优先级，变量的声明、初始化、赋值方法及其作用域、Java表达式的表示方法、表达式提升和转换方法也是本章的重点。
   
   
第三章 流程控制语句：
第一节、Java程序的结构：
  一个Java程序可以由一个或多个.java文件组成，这些文件称为源文件。每个源文件中含有一个或多个类或接口。一个源文件中如果有多个类，则最多只能有一个是public类型的类，且该源文件的名字则为这个公有类的名字，且大小写一致。其他非public的类的个数不限。
  一个Java程序的结构包含以下内容：
   package语句：  包语句，每个文件最多只有一个，且必须放在文件开始的地方。
   import语句：  引入语句，可以没有，也可以有多个，如果有import语句的话，必须放在所有类定义的前面。
   具有public权限的类定义：  每个文件中最多有一个。
   类定义：  每个文件中包含的非public权限的类定义的个数没有限制。
   接口定义：  每个文件中包含的接口定义个数没有限制
  
  1.1 Java包的概念
  包是类的容器，包的设计人员利用包来划分名字空间，以避免类名冲突。Java中的包一般均包含相关的类，使用包的目的就是将相关的源代码文件组织到一起。
  程序中如果有package语句，该语句一定是源文件中的第一条非注释语句，它的前面只能有注释或空行。另外，一个文件中最多只能有一条package语句。包的名字有层次关系，各层之间以点分隔。
  
  1.2 引入语句
  假设已定义如下的包：
  package mypackage;
  public class MyClass {....}
  如果其他人在其他包中想使用MyClass类，则需要使用全名，如： mypackage.MyClass m = new mypackage.MyClass();
  为了简化程序的书写，Java提供了引入语句。当需要使用其他包中的类时，可以使用import语句引入需要的类，程序中无需在使用全名，语句简写为：import mypackage. *; MyClass m = new MyClass();
  从系统的角度来看，包名也是类名的一部分。包中类的名字“全称”是包名加类名。所以虽然不同的包中可能存在相同名称的类，但因为它们不在同一个包中，故类名还是不同的，从而可以尽最大可能避免名称冲突。从另一个角度看，这种机制提供了包一级的封装及存取权限。
  
第二节、流程控制
  Java程序中的语句指示计算机完成某些操作，一条语句的操作完成后会把控制转给另一条语句。语句是Java的最小执行单位，语句间以分号(;)作为分隔符。语句分为单语句及复合语句，单语句就是通常意义下的一条语句;而复合语句是一对大括号{}括起来的语句组，也称为“块”。
  2.1.赋值语句
  在Java程序中，表达式可以当作一个值赋给某个变量，这样的语句称为赋值语句。有的表达式也可单独当作语句，这样的语句称为表达式语句。	
  
  2.2 分支语句
  分支语句根据一定的条件，动态决定程序的流程方向，从程序的多个分支中选择一个或几个来执行。分支语句有if语句和switch语句两种。
  if语句：if语句是单重选择，最多只有两个分支。基本格式为： if(条件表达式) {语句1;} else {语句2;} 
  if关键字之后的条件表达式必须得到一个逻辑值，不能向其他语言那样用数值来代替。因为Java不提供数值与逻辑值之间的转换。
  if语句的三种常见形式：形式1，没有else子句。形式2,包含else语句。形式3,嵌套的if语句。
  
  switch语句：使用if语句可以实现简单的分支判断，并进而执行不同的语句。为了更方便地实现多重分支，Java语言还提供了switch语句，它的含义与嵌套if语句类似，只是格式上更加简洁。语法格式如下：
  switch (表达式) {
  		case c1：
  			语句组1;
  			break;
  		case c2：
  			语句组2;
  			break;
  } 这里，表达式的计算结果必须是int或char型，即是int型赋值相容的。当用byte或者short型时，要进行提升。Java规定switch语句不允许使用浮点型或long型表达式。c1，c2是int型或字符串型常量。default子句是可选的，
  switch语句的语义是：计算表达式的值，用该值依次和c1,c2相比较。如果该值等于其中之一则执行后面的语句组，直到遇到break语句跳到switch之后的语句。如果没有相匹配的case，则执行default之后的语句组。
  可以将default语句看作一个分支，即前面的条件均不满足时执行default。
  
  3.循环语句
  循环语句控制程序流多次执行一段代码。Java语言提供3种循环语句，分别是for语句、while语句和do语句。
  3.1 for(初始语句;条件表达式;迭代语句){
  		循环体语句;
  } //初始语句和迭代语句中可以包含有多个语句，各语句间以逗号分隔。for语句括号内的3个部分都是可选的，条件表达式为空时，默认规定为恒真。
  for语句的语义是：先执行初始语句，判断条件表达式的值，当条件表达式为真时，执行循环体语句，再执行迭代语句，然后去判别条件表达式的值。这个过程一直进行下去，知道条件表达式的值为假时，循环结束，转到for之后的语句继续执行。
  如果条件表达式的值永远为真，则循环会无限制的执行下去，直到系统资源消耗尽为止。比如for(;;){System.out.println("Always print!");}
  
  3.2 while语句：
  for语句中常常用循环控制变量显式控制循环的执行次数。当程序中不能明确地指明循环的执行次数时，可以仅用条件表达式来决定循环的执行与否。这样的循环用while来实现：
  while(条件表达式)：
    循环体语句;
  和if语句一样，while语句中的条件表达式亦不可用数值来代替。
  while语句的语义：计算条件表达式的值，当值为真时，重复执行循环体语句，直到条件表达式为假时结束。如果第一次检查时条件表达式为假，则循环体语句一次也不执行。如果条件表达式始终为真，则循环不会终止。
  
  3.3 do语句：
  do语句与while语句很相似。它把while语句中的条件表达式移到循环体之后。
  do语句的语法结构：
  	do：
  		语句：
  	while(条件表达式);
  do语句的语义是:首先执行循环体语句，然后判断条件表达式的值，当值为真时，重复执行循环体语句，直到表达式的值为假时结束循环。不论条件表达式的值是真是假，do循环中的循环体至少执行一次。
  
  4.跳转语句：
  	Java抛弃了有争议的goto语句，代之以两条特殊的流控制语句：break和continue语句，它们用在分支语句或循环语句中，更方便的控制程序执行的方向。
  4.1 标号：
  标号可以放在任意语句之前，通常与for、while或do语句配合使用，其语法格式为：
  标号：语句;
  
  4.2 break语句：
  break语句可用于3类语句中，第一类是在switch语句中，第二类实在for、while及do等循环语句中，第三类是在语句块中。在switch语句及循环语句中，break的语义是跳过本块中余下的所有语句，转到快尾，执行其后的语句。
  循环语句中的break为跳过余下的语句，结束循环。break语句的第三种使用方法是在块中和标号配合使用，其语法格式为：
  int x = 20;
  out: for(;;) {
  		if(x == 20) break out;
  }
  System.out.println("after out block");
  在上述案例中，当if语句条件满足时，跳出out标记的循环，执行块后的语句，即执行输出语句，显示“after out block”。
  
  4.3 continue语句：
  在循环语句中，continue语句可以立即结束当次循环，开始执行下一次循环，当然执行前需要先判断循环条件是否满足。
  continue语句也可以和标号一起使用，其语法格式为： continue 标号;
  它立即结束标号标记的那重循环的当次执行，开始下一次循环。这种形式的语句可以用在多重循环中。
 
第三节、简单的输入/输出
  程序运行期间交互式地读入用户的输入并将计算结果返回给用户是一个基本要求。本节介绍Java提供的用于输入/输出的几个基本类。
  1.Scanner类
  Scanner类属于Java.util包。它提供了许多方法，可用来方便地读入不同类型的输入值。可查阅相关的API文档来详细了解。
  要调用Scanner类的方法，必须先创建一个对象。Java中使用了new运算符来创建，语句如： Scannner scan = new Scanner(System.in);
  在创建Scanner类的对象时，构造方法接收一个参数，这个参数代表了输入源。System.in对象代表标准输入流，默认指键盘。
  Scanner对象用空白(空格，水平制表符及回车换行符)作为输入的分隔元素。这些空白成为分隔符。也可以指定用其他符号作为分隔符。
  Scanner类的next()方法读入下一个输入对象，将它作为字符串返回。如果输入的是一串用空白分开的多个字，则每次调用nex()都会得到下一个字。nextLine()方法读入当前行的所有输入，直到行尾，然后作为字符串返回。
  Scanner类的不同方法，如nextInt()和nextDouble()，用来读入不同类型的数据。输入的数值类型必须与所声明的变量类型要赋值兼容。
  
  2.NumberFormat类和DecimalFormat类
  NumberFormat类提供对数值进行格式化操作的一般功能。不能使用new运算符实例化一个NumberFormat对象，只能直接使用类名调用一个特殊的静态方法来得到一个对象。
  比如： NumberFormat类中的getInstance()方法返回当前默认语言环境的默认数值格式，然后使用格式对象来调用format()方法，将参数按相应的模式格式化后作为字符串返回。
  String myString = NumberFormat.getInstance().format(myNumber);
  和NumberFormat类不一样，DecimalFormat类按惯例使用new运算符来实例化对象。它的构造方法要带一个String类型的参数，这个参数表示格式化处理模式。

第四节、处理异常
  Java语言把程序运行中可能遇到的错误分为两类，一类是非致命性的，通过某种修正后程序还能继续执行。这类错误称为异常(Exception)。如打开一个文件时，发现文件不存在。又比如说除0溢出、数组越界等。这一类错误可以借助程序员的处理来恢复。
  另一类是致命性的，即程序遇到了非常严重的不正常状态，不能简单地恢复执行，这就是错误。比如程序运行过程中内存耗尽。异常处理要考虑的问题包括：如何处理异常？把异常交给谁去处理？程序又该如何从异常中恢复？
  为了解决异常问题，Java提供了异常处理机制，预定义了一个Exception类。当程序中发生异常时，通常不是简单地结束程序，而是转去执行某段特殊代码来处理这个异常，设法恢复程序继续执行。但是如果程序遇到错误时，往往不能从中恢复，因此最好的办法是让程序中断执行。
  在一个方法的运行过程中，如果发生了异常，称程序产生了一个异常事件，相应地生成异常对象。该对象可能由正在运行的方法产生，也可能由JVM生成。
  

  
  
  
  
  
  
  
  
  
  